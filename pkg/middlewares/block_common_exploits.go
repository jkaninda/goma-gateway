/*
 * Copyright 2024 Jonas Kaninda
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package middlewares

import (
	"bytes"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"regexp"
	"strings"
)

// BlockExploitsMiddleware Middleware to block common exploits
func BlockExploitsMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		contentType := getContentType(r)

		if isExploitDetected(r.URL.Query(), sqlPatterns, traversalPatterns, xssPatterns) {
			logger.Warn("Forbidden - Potential exploit detected", "method", r.Method, "url", r.URL.String(), "client_ip", getRealIP(r), "status", http.StatusForbidden, "user_agent", r.UserAgent())

			RespondWithError(w, r, http.StatusForbidden, fmt.Sprintf("%d %s", http.StatusForbidden, http.StatusText(http.StatusForbidden)), nil, contentType)
			return
		}
		if traversalPatterns.MatchString(r.URL.Path) {
			logger.Warn("Forbidden - Potential exploit detected", "method", r.Method, "url", r.URL.String(), "client_ip", getRealIP(r), "status", http.StatusForbidden, "user_agent", r.UserAgent())
			RespondWithError(w, r, http.StatusForbidden, fmt.Sprintf("%d %s", http.StatusForbidden, http.StatusText(http.StatusForbidden)), nil, contentType)
			return
		}
		XXEProtection(w, r)

		// Pass to the next handler if no exploit patterns were detected
		next.ServeHTTP(w, r)
	})
}

// XXEProtection protects against XXE attacks
func XXEProtection(w http.ResponseWriter, r *http.Request) {
	// Check if the request contains XML content
	if strings.Contains(r.Header.Get("Content-Type"), "application/xml") ||
		strings.Contains(r.Header.Get("Content-Type"), "text/xml") {
		// Read the request body
		body, err := io.ReadAll(r.Body)
		if err != nil {
			RespondWithError(w, r, http.StatusBadRequest, "Failed to read request body", nil, "")
			return
		}
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				logger.Error("Error closing request body", "error", err)
				return
			}
		}(r.Body)

		// Decode the XML while disabling external entities
		decoder := xml.NewDecoder(bytes.NewReader(body))
		decoder.Strict = false
		decoder.Entity = xml.HTMLEntity // Disable external entities

		var parsed interface{}
		if err := decoder.Decode(&parsed); err != nil {
			RespondWithError(w, r, http.StatusBadRequest, "Invalid XML: "+err.Error(), nil, "")
			return
		}
		// Replace the request body with the sanitized XML
		r.Body = io.NopCloser(bytes.NewReader(body))
	}
}

// isExploitDetected checks if any value in the given map matches the provided patterns.
func isExploitDetected(values map[string][]string, patterns ...*regexp.Regexp) bool {
	for _, valuesList := range values {
		for _, value := range valuesList {
			for _, pattern := range patterns {
				if pattern.MatchString(value) {
					return true
				}
			}
		}
	}
	return false
}
