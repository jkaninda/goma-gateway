# Goma Gateway Configuration File
version: 2
gateway:
  # Timeouts in seconds
  writeTimeout: 15          # Maximum duration for writing to a client.
  readTimeout: 15           # Maximum duration for reading from a client.
  idleTimeout: 30           # Maximum duration to keep idle connections open.

  # TLS Configuration
  tls:  # Global TLS configuration for the gateway
    keys:  # List of TLS certificates and private keys
      - cert: /path/to/certificate.crt  # File path to the TLS certificate
        key: /path/to/private.key  # File path to the private key
      - cert: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS...  # Base64-encoded certificate
        key:  LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS...  # Base64-encoded private key
      - cert: |  # Raw certificate content (PEM format)
          -----BEGIN CERTIFICATE-----
            <certificate content>
          -----END CERTIFICATE-----
        key: |  # Raw private key content (PEM format)
          -----BEGIN PRIVATE KEY-----
             <private-key content>
          -----END PRIVATE KEY-----


  # Logging Configuration
  logLevel: info            # Logging level (options: debug, trace, off).
  accessLog: "/dev/Stdout"  # Path for access logs.
  errorLog: "/dev/stderr"   # Path for error logs.

  # Redis Configuration
  # redis:
  #   addr: redis:6379     # Redis server address.
  #   password: password   # Redis password (optional).

  # Health Check Configuration
  disableHealthCheckStatus: false   # Disable overall health check status.
  disableRouteHealthCheckError: false # Disable backend route health check errors.

  # Display Options
  disableDisplayRouteOnStart: false  # Disable route display at startup.
  disableKeepAlive: false            # Disable Keep-Alive for the server.

  # Security Features
  blockCommonExploits: false         # Block common exploits (e.g., SQL Injection, XSS).

  # Error Interception
  errorInterceptor:
    enabled: true                    # Enable backend error interception.
    contentType: "application/json"  # Response Content-Type for intercepted errors.
    errors:
      - status: 401
        body: ""                     # Custom response body for HTTP 401 errors.
      - status: 404
        body: "{\"success\":false,\"status\":404,\"message\":\"Page not found\",\"data\":[]}" # Raw JSON response for 404.
      - status: 500
        body: "Internal server error" # Custom response body for HTTP 500 errors.

  # Cross-Origin Resource Sharing (CORS)
  cors:
    origins:                         # Global allowed origins.
      - http://localhost:8080
      - https://example.com
    headers:                         # Global allowed headers.
      Access-Control-Allow-Headers: 'Origin, Authorization, Accept, Content-Type, Access-Control-Allow-Headers, X-Client-Id, X-Session-Id'
      Access-Control-Allow-Credentials: 'true'
      Access-Control-Max-Age: 1728000
  # Additional configs
  extraConfig:
    # Path for additional configuration files (e.g., routes and middleware), default /etc/goma/extra.
    directory: /etc/goma/extra
    watch: true                 # Enable live monitoring for changes in the directory.
  # Route Definitions
  routes:
    # Route Example 1
    - path: /
      name: Public
      disabled: false                # Disables the route, the route will not be proxied.
      hosts: []                      # Optional host-based routing.
      rewrite: /                     # Rewrite request paths (e.g., /store to /).
      destination: https://example.com
      methods: [POST, PUT, GET]      # Allowed HTTP methods for this route.
      disableHostForwarding: false   # Disable forwarding the host header.
      cors:                          # Route-specific CORS configuration (overrides global).
        origins:
          - https://dev.example.com
        headers:
          Access-Control-Allow-Methods: 'GET'
      middlewares:                   # List of middlewares for this route.
        - api-forbidden-paths

    # Route Example 2
    - path: /protected
      name: Basic Auth
      disabled: false                # Disables the route, the route will not be proxied.
      rewrite: /
      destination: ''
      backends:  # List of backend servers to route traffic to
        - endPoint: https://backend1.example.com
        - endPoint: https://backend2.example.com
        - endPoint: https://backend3.example.com
      insecureSkipVerify: true       # Disable SSL verification for backend connections.
      ## Allowed HTTP Methods
      methods:
        - GET
        - PATCH
        - OPTIONS
      healthCheck:                   # Health check configuration for the route.
        path: /health/live
        interval: 30s
        timeout: 10s
        healthyStatuses:
          - 200
          - 404
      middlewares:
        - api-forbidden-paths
        - basic-auth

# Middleware Definitions
middlewares:
  - name: basic-auth
    type: basic                     # Type of authentication (basic).
    paths:                          # Paths to protect with authentication.
      - /user   # Blocks only /user path
      - /admin/* # Explicitly blocks /admin and all subpaths
      - /account # Blocks only /account path
    rule:                           # Authentication rules.
      realm: Restricted # Realm for basic authentication.
      users: # List of users for basic authentication. Format: username:password or username:$2y$05$hash (bcrypt) or admin:{SHA}hash (SHA1)
        - admin:$2y$05$TIx7l8sJWvMFXw4n0GbkQuOhemPQOormacQC4W1p28TOVzJtx.XpO
        - admin:admin

  - name: google-auth
    type: forwardAuth
    paths:
      - /protected-access/*
      - /admin/*
    rule:
      # URL of the backend authentication service
      authUrl: http://authentication-service:8080/auth/verify

      # Redirect URL when response status is 401
      authSignIn: http://authentication-service:8080/auth/signin

      # Skip SSL certificate verification
      skipInsecureVerify: true

      # Forward the original Host header
      enableHostForwarding: true

      # Headers to include in the authentication request
      authRequestHeaders:
        - Authorization
        - X-Auth-UserId

      # Authentication cookies to include in the response
      addAuthCookiesToResponse:
        - X-Auth-UserId
        - X-Token
      # Map authentication response headers to request headers
      authResponseHeaders:
        - "auth_userId: X-Auth-UserId" # Custom mapping
        - X-Auth-UserCountryId # Direct mapping
        - X-Token # Direct mapping

      # Map authentication response headers to request parameters
      authResponseHeadersAsParams:
        - "X-Auth-UserId: userId" # Custom mapping
        - X-Token:token # Custom mapping
        - X-Auth-UserCountryId # Direct mapping
## Block access to specified paths
  - name: api-forbidden-paths
    type: access
    paths:                          # Paths to block access.
      - /swagger-ui/*
      - /v2/swagger-ui/*
      - /api-docs/*
